import React, { Component } from 'react';
import Web3 from 'web3';
import Identicon from 'identicon.js';
import './App.css';
import Decentragram from '../abis/Decentragram.json'
import Navbar from './Navbar'
import Main from './Main'

const ipfsClient = require('ipfs-http-client')
const ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })


class App extends Component {

  async componentWillMount() {
    await this.loadWeb3()
    this.loadBlockchainData()
  }

  //Import web3 to connect our browser to the Ethereum blockchain
  async loadWeb3 () {
    if(window.ethereum) {
      window.web3 = new Web3(window.ethereum)
      await window.ethereum.enable()
    } else if (window.web3) {
      window.web3 = new Web3(window.web3.currentProvider)
    } else {
      window.alert('Non-Ethereum browser detected. Please install MetaMask')
    }
  }

  async loadBlockchainData () {
    const web3 = window.web3
    //load account
    const accounts = await web3.eth.getAccounts()
    //accounts is an array, and twe set the state to the first item in the array
    this.setState({account: accounts[0]})

    //In these lines, we are connecting the smart contract by finding the abi and address in the Decentragram.JSON file generated by truffle.
    const networkId = await web3.eth.net.getId()
    const networkData = Decentragram.networks[networkId]
    if(networkData){
      const decentragram = web3.eth.Contract(Decentragram.abi, networkData.address)
      this.setState({ decentragram })

      //With web3, you have to use .call() to read data from the blockchain rather than just invoking the function
      const imagesCount = await decentragram.methods.imageCount().call()
      this.setState({ imagesCount })

      for(let i = 1; i <= imagesCount; i++){
        const image = await decentragram.methods.images(i).call()
        this.setState({
          images: [...this.state.images, image]
        })
      }

      //Sorts the images with the highest tipped images first
      this.setState({
        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount)
      })

      this.setState({loading: false})
    } else {
      window.alert('Decentragram contract has not been deployed to the network')
    }
  }

  captureFile = event => {
    event.preventDefault()

    //Capture the file off the submission
    const file = event.target.files[0]
    const reader = new window.FileReader()
    reader.readAsArrayBuffer(file)

    //Take the uploaded file and turn it into something IPFS expects:
    reader.onloadend = () => {
      this.setState({ buffer: Buffer(reader.result) })
      console.log('buffer', this.state.buffer)
    }
  }

  uploadImage = description => {
    console.log('Submitting this image to ipfs...')

    //add file to the IPFS
    ipfs.add(this.state.buffer, (err, result) => {
      console.log('Ipfs result', result)
      if (err) {
        console.error(err)
        return
      }

      this.setState({ loading: true })

      //This line is what actually calls the uploadImage function from the smart contract
      this.state.decentragram.methods.uploadImage(result[0].hash, description)
      .send({ from: this.state.account }).on('transactionHash', (hash) => {
        this.setState({ loading: false })
      })
    })
  }

  tipImageOwner = (id, tipAmount) => {
    this.setState({ loading: true })
    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount })
    .on('transactionHash', (hash) => {
      this.setState({ loading: false })
    })
  }

  constructor(props) {
    super(props)
    this.state = {
      account: '',
      decentragram: null,
      images: [],
      loading: true
    }
  }

  render() {
    return (
      <div>
        <Navbar account={this.state.account} />
        { this.state.loading
          ? <div id="loader" className="text-center mt-5"><p>Loading...</p></div>
          : <Main
            images={this.state.images}
            tipImageOwner={this.tipImageOwner}
            captureFile={this.captureFile}
            uploadImage={this.uploadImage}
            />
          }
      </div>
    );
  }
}

export default App;
