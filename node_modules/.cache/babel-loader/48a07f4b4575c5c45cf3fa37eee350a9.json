{"ast":null,"code":"var capability = require('./capability');\n\nvar inherits = require('inherits');\n\nvar IncomingMessage = require('./incoming-message');\n\nvar stream = require('readable-stream');\n\nvar fetch = self.fetch;\n\nvar ClientRequest = module.exports = function (opts) {\n  var _this = this;\n\n  stream.Writable.call(this);\n  this._opts = opts;\n  this._body = [];\n  this._headers = {};\n  if (opts.auth) this.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'));\n  Object.keys(opts.headers).forEach(function (name) {\n    _this.setHeader(name, opts.headers[name]);\n  });\n  this._mode = 'fetch';\n  this._fetchTimer = null;\n  this.on('finish', function () {\n    return _this._onFinish();\n  });\n};\n\ninherits(ClientRequest, stream.Writable);\n\nClientRequest.prototype.setHeader = function (name, value) {\n  var lowerName = name.toLowerCase(); // This check is not necessary, but it prevents warnings from browsers about setting unsafe\n  // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n  // http-browserify did it, so I will too.\n\n  if (unsafeHeaders.indexOf(lowerName) !== -1) {\n    return;\n  }\n\n  this._headers[lowerName] = value;\n};\n\nClientRequest.prototype.getHeader = function (name) {\n  var header = this._headers[name.toLowerCase()];\n\n  if (header) return header.value;\n  return null;\n};\n\nClientRequest.prototype.removeHeader = function (name) {\n  delete this._headers[name.toLowerCase()];\n};\n\nClientRequest.prototype._onFinish = function () {\n  var _this2 = this;\n\n  if (this._destroyed) return;\n  var opts = this._opts;\n  var headersObj = this._headers;\n  var body = null;\n\n  if (opts.method !== 'GET' && opts.method !== 'HEAD') {\n    body = new Blob(this._body, {\n      type: (headersObj['content-type'] || {}).value || ''\n    });\n  }\n\n  var signal = null;\n\n  if (capability.abortController) {\n    var controller = new AbortController();\n    signal = controller.signal;\n    this._fetchAbortController = controller;\n\n    if ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n      this._fetchTimer = setTimeout(function () {\n        _this2.emit('requestTimeout');\n\n        if (_this2._fetchAbortController) _this2._fetchAbortController.abort();\n      }, opts.requestTimeout);\n    }\n  }\n\n  fetch(this._opts.url, {\n    method: this._opts.method,\n    headers: this._headers,\n    body: body || undefined,\n    mode: 'cors',\n    credentials: opts.withCredentials ? 'include' : 'same-origin',\n    signal: signal\n  }).then(function (response) {\n    _this2._fetchResponse = response;\n\n    _this2._connect();\n  }, function (reason) {\n    clearTimeout(_this2._fetchTimer);\n    if (!_this2._destroyed) _this2.emit('error', reason);\n  });\n};\n\nClientRequest.prototype._connect = function () {\n  var _this3 = this;\n\n  if (this._destroyed) return;\n  this._response = new IncomingMessage(this._fetchResponse, this._mode, this._fetchTimer);\n\n  this._response.on('error', function (err) {\n    return _this3.emit('error', err);\n  });\n\n  this.emit('response', this._response);\n};\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n  this._body.push(chunk);\n\n  cb();\n};\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n  this._destroyed = true;\n  clearTimeout(this._fetchTimer);\n  if (this._response) this._response._destroyed = true;\n  if (this._xhr) this._xhr.abort();else if (this._fetchAbortController) this._fetchAbortController.abort();\n};\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n  if (typeof data === 'function') {\n    cb = data;\n    data = undefined;\n  }\n\n  stream.Writable.prototype.end.call(this, data, encoding, cb);\n};\n\nClientRequest.prototype.flushHeaders = function () {};\n\nClientRequest.prototype.setTimeout = function () {};\n\nClientRequest.prototype.setNoDelay = function () {};\n\nClientRequest.prototype.setSocketKeepAlive = function () {}; // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n\n\nvar unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'via'];","map":null,"metadata":{},"sourceType":"script"}