{"ast":null,"code":"'use strict';\n\nvar IsIpfs = require('is-ipfs');\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar moduleConfig = require('../utils/module-config');\n\nvar cleanCID = require('../utils/clean-cid');\n\nmodule.exports = function (arg) {\n  var send = moduleConfig(arg);\n  var refs = promisify(function (args, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = module.exports.normalizeOpts(opts);\n\n    try {\n      args = module.exports.checkArgs(args);\n    } catch (err) {\n      return callback(err);\n    }\n\n    var transform = function transform(res, cb) {\n      cb(null, res.map(function (r) {\n        return {\n          ref: r.Ref,\n          err: r.Err\n        };\n      }));\n    };\n\n    var request = {\n      args: args,\n      path: 'refs',\n      qs: opts\n    };\n    send(request, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, transform, callback);\n    });\n  });\n  refs.local = require('./refs-local')(arg);\n  refs.localReadableStream = require('./refs-local-readable-stream')(arg);\n  refs.localPullStream = require('./refs-local-pull-stream')(arg);\n  return refs;\n};\n\nmodule.exports.checkArgs = function (args) {\n  var isArray = Array.isArray(args);\n  args = isArray ? args : [args];\n  var res = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var arg = _step.value;\n\n      try {\n        arg = cleanCID(arg);\n      } catch (err) {\n        if (!IsIpfs.ipfsPath(arg)) {\n          throw err;\n        }\n      }\n\n      res.push(arg);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return isArray ? res : res[0];\n};\n\nmodule.exports.normalizeOpts = function (opts) {\n  opts = opts || {};\n\n  if (typeof opts.maxDepth === 'number') {\n    opts['max-depth'] = opts.maxDepth;\n  }\n\n  return opts;\n};","map":null,"metadata":{},"sourceType":"script"}