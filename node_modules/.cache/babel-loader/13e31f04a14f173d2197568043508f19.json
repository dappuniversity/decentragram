{"ast":null,"code":"'use strict';\n\nvar varint = require('varint');\n\nvar svarint = require('signed-varint');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar encoder = function encoder(type, encode, decode, encodingLength) {\n  encode.bytes = decode.bytes = 0;\n  return {\n    type: type,\n    encode: encode,\n    decode: decode,\n    encodingLength: encodingLength\n  };\n};\n\nexports.make = encoder;\n\nexports.bytes = function () {\n  var bufferLength = function bufferLength(val) {\n    return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val);\n  };\n\n  var encodingLength = function encodingLength(val) {\n    var len = bufferLength(val);\n    return varint.encodingLength(len) + len;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    var oldOffset = offset;\n    var len = bufferLength(val);\n    varint.encode(len, buffer, offset);\n    offset += varint.encode.bytes;\n    if (val instanceof Uint8Array) buffer.set(val, offset);else buffer.write(val, offset, len);\n    offset += len;\n    encode.bytes = offset - oldOffset;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var oldOffset = offset;\n    var len = varint.decode(buffer, offset);\n    offset += varint.decode.bytes;\n    var val = buffer.slice(offset, offset + len);\n    offset += val.length;\n    decode.bytes = offset - oldOffset;\n    return val;\n  };\n\n  return encoder(2, encode, decode, encodingLength);\n}();\n\nexports.string = function () {\n  var encodingLength = function encodingLength(val) {\n    var len = Buffer.byteLength(val);\n    return varint.encodingLength(len) + len;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    var oldOffset = offset;\n    var len = Buffer.byteLength(val);\n    varint.encode(len, buffer, offset, 'utf-8');\n    offset += varint.encode.bytes;\n    buffer.write(val, offset, len);\n    offset += len;\n    encode.bytes = offset - oldOffset;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var oldOffset = offset;\n    var len = varint.decode(buffer, offset);\n    offset += varint.decode.bytes;\n    var val = buffer.toString('utf-8', offset, offset + len);\n    offset += len;\n    decode.bytes = offset - oldOffset;\n    return val;\n  };\n\n  return encoder(2, encode, decode, encodingLength);\n}();\n\nexports.bool = function () {\n  var encodingLength = function encodingLength(val) {\n    return 1;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    buffer[offset] = val ? 1 : 0;\n    encode.bytes = 1;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var bool = buffer[offset] > 0;\n    decode.bytes = 1;\n    return bool;\n  };\n\n  return encoder(0, encode, decode, encodingLength);\n}();\n\nexports.int32 = function () {\n  var decode = function decode(buffer, offset) {\n    var val = varint.decode(buffer, offset);\n    decode.bytes = varint.decode.bytes;\n    return val > 2147483647 ? val - 4294967296 : val;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset);\n    encode.bytes = varint.encode.bytes;\n    return buffer;\n  };\n\n  var encodingLength = function encodingLength(val) {\n    return varint.encodingLength(val < 0 ? val + 4294967296 : val);\n  };\n\n  return encoder(0, encode, decode, encodingLength);\n}();\n\nexports.int64 = function () {\n  var decode = function decode(buffer, offset) {\n    var val = varint.decode(buffer, offset);\n\n    if (val >= Math.pow(2, 63)) {\n      var limit = 9;\n\n      while (buffer[offset + limit - 1] === 0xff) {\n        limit--;\n      }\n\n      limit = limit || 9;\n      var subset = Buffer.allocUnsafe(limit);\n      buffer.copy(subset, 0, offset, offset + limit);\n      subset[limit - 1] = subset[limit - 1] & 0x7f;\n      val = -1 * varint.decode(subset, 0);\n      decode.bytes = 10;\n    } else {\n      decode.bytes = varint.decode.bytes;\n    }\n\n    return val;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    if (val < 0) {\n      var last = offset + 9;\n      varint.encode(val * -1, buffer, offset);\n      offset += varint.encode.bytes - 1;\n      buffer[offset] = buffer[offset] | 0x80;\n\n      while (offset < last - 1) {\n        offset++;\n        buffer[offset] = 0xff;\n      }\n\n      buffer[last] = 0x01;\n      encode.bytes = 10;\n    } else {\n      varint.encode(val, buffer, offset);\n      encode.bytes = varint.encode.bytes;\n    }\n\n    return buffer;\n  };\n\n  var encodingLength = function encodingLength(val) {\n    return val < 0 ? 10 : varint.encodingLength(val);\n  };\n\n  return encoder(0, encode, decode, encodingLength);\n}();\n\nexports.sint32 = exports.sint64 = function () {\n  return encoder(0, svarint.encode, svarint.decode, svarint.encodingLength);\n}();\n\nexports.uint32 = exports.uint64 = exports.enum = exports.varint = function () {\n  return encoder(0, varint.encode, varint.decode, varint.encodingLength);\n}(); // we cannot represent these in javascript so we just use buffers\n\n\nexports.fixed64 = exports.sfixed64 = function () {\n  var encodingLength = function encodingLength(val) {\n    return 8;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    buffer.set(val, offset);\n    encode.bytes = 8;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var val = buffer.slice(offset, offset + 8);\n    decode.bytes = 8;\n    return val;\n  };\n\n  return encoder(1, encode, decode, encodingLength);\n}();\n\nexports.double = function () {\n  var encodingLength = function encodingLength(val) {\n    return 8;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    buffer.writeDoubleLE(val, offset);\n    encode.bytes = 8;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var val = buffer.readDoubleLE(offset);\n    decode.bytes = 8;\n    return val;\n  };\n\n  return encoder(1, encode, decode, encodingLength);\n}();\n\nexports.fixed32 = function () {\n  var encodingLength = function encodingLength(val) {\n    return 4;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    buffer.writeUInt32LE(val, offset);\n    encode.bytes = 4;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var val = buffer.readUInt32LE(offset);\n    decode.bytes = 4;\n    return val;\n  };\n\n  return encoder(5, encode, decode, encodingLength);\n}();\n\nexports.sfixed32 = function () {\n  var encodingLength = function encodingLength(val) {\n    return 4;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    buffer.writeInt32LE(val, offset);\n    encode.bytes = 4;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var val = buffer.readInt32LE(offset);\n    decode.bytes = 4;\n    return val;\n  };\n\n  return encoder(5, encode, decode, encodingLength);\n}();\n\nexports.float = function () {\n  var encodingLength = function encodingLength(val) {\n    return 4;\n  };\n\n  var encode = function encode(val, buffer, offset) {\n    buffer.writeFloatLE(val, offset);\n    encode.bytes = 4;\n    return buffer;\n  };\n\n  var decode = function decode(buffer, offset) {\n    var val = buffer.readFloatLE(offset);\n    decode.bytes = 4;\n    return val;\n  };\n\n  return encoder(5, encode, decode, encodingLength);\n}();","map":null,"metadata":{},"sourceType":"script"}