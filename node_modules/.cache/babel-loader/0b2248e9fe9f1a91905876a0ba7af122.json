{"ast":null,"code":"/* eslint-disable */\nmodule.exports = function decodeAsm(stdlib, foreign, buffer) {\n  'use asm'; // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer); // var log = foreign.log\n\n  var pushInt = foreign.pushInt;\n  var pushInt32 = foreign.pushInt32;\n  var pushInt32Neg = foreign.pushInt32Neg;\n  var pushInt64 = foreign.pushInt64;\n  var pushInt64Neg = foreign.pushInt64Neg;\n  var pushFloat = foreign.pushFloat;\n  var pushFloatSingle = foreign.pushFloatSingle;\n  var pushFloatDouble = foreign.pushFloatDouble;\n  var pushTrue = foreign.pushTrue;\n  var pushFalse = foreign.pushFalse;\n  var pushUndefined = foreign.pushUndefined;\n  var pushNull = foreign.pushNull;\n  var pushInfinity = foreign.pushInfinity;\n  var pushInfinityNeg = foreign.pushInfinityNeg;\n  var pushNaN = foreign.pushNaN;\n  var pushNaNNeg = foreign.pushNaNNeg;\n  var pushArrayStart = foreign.pushArrayStart;\n  var pushArrayStartFixed = foreign.pushArrayStartFixed;\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;\n  var pushObjectStart = foreign.pushObjectStart;\n  var pushObjectStartFixed = foreign.pushObjectStartFixed;\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;\n  var pushByteString = foreign.pushByteString;\n  var pushByteStringStart = foreign.pushByteStringStart;\n  var pushUtf8String = foreign.pushUtf8String;\n  var pushUtf8StringStart = foreign.pushUtf8StringStart;\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;\n  var pushTagStart = foreign.pushTagStart;\n  var pushTagStart4 = foreign.pushTagStart4;\n  var pushTagStart8 = foreign.pushTagStart8;\n  var pushTagUnassigned = foreign.pushTagUnassigned;\n  var pushBreak = foreign.pushBreak;\n  var pow = stdlib.Math.pow; // -- Constants\n  // -- Mutable Variables\n\n  var offset = 0;\n  var inputLength = 0;\n  var code = 0; // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n\n  function parse(input) {\n    input = input | 0;\n    offset = 0;\n    inputLength = input;\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;\n\n      if ((code | 0) > 0) {\n        break;\n      }\n    }\n\n    return code | 0;\n  } // -- Helper Function\n\n\n  function checkOffset(n) {\n    n = n | 0;\n\n    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {\n      return 0;\n    }\n\n    return 1;\n  }\n\n  function readUInt16(n) {\n    n = n | 0;\n    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;\n  }\n\n  function readUInt32(n) {\n    n = n | 0;\n    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;\n  } // -- Initial Byte Handlers\n\n\n  function INT_P(octet) {\n    octet = octet | 0;\n    pushInt(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function UINT_P_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushInt(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function UINT_P_16(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushInt(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function UINT_P_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function UINT_P_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function INT_N(octet) {\n    octet = octet | 0;\n    pushInt(-1 - (octet - 32 | 0) | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function UINT_N_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function UINT_N_16(octet) {\n    octet = octet | 0;\n    var val = 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    val = readUInt16(offset + 1 | 0) | 0;\n    pushInt(-1 - (val | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function UINT_N_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function UINT_N_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function BYTE_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 64 | 0;\n\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n\n  function BYTE_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushByteStringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function UTF8_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 96 | 0;\n\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n\n  function UTF8_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushUtf8StringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function ARRAY(octet) {\n    octet = octet | 0;\n    pushArrayStartFixed(octet - 128 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function ARRAY_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function ARRAY_16(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function ARRAY_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function ARRAY_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function ARRAY_BREAK(octet) {\n    octet = octet | 0;\n    pushArrayStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function MAP(octet) {\n    octet = octet | 0;\n    var step = 0;\n    step = octet - 160 | 0;\n\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed(step | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function MAP_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function MAP_16(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function MAP_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function MAP_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function MAP_BREAK(octet) {\n    octet = octet | 0;\n    pushObjectStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_KNOWN(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BIGNUM_POS(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BIGNUM_NEG(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_FRAC(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BIGNUM_FLOAT(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BASE64_URL(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BASE64(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BASE16(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_1(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushTagStart(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_2(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushTagStart(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_4(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function SIMPLE_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushSimpleUnassigned((octet | 0) - 224 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FALSE(octet) {\n    octet = octet | 0;\n    pushFalse();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_TRUE(octet) {\n    octet = octet | 0;\n    pushTrue();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_NULL(octet) {\n    octet = octet | 0;\n    pushNull();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_UNDEFINED(octet) {\n    octet = octet | 0;\n    pushUndefined();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_BYTE(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FLOAT_HALF(octet) {\n    octet = octet | 0;\n    var f = 0;\n    var g = 0;\n    var sign = 1.0;\n    var exp = 0.0;\n    var mant = 0.0;\n    var r = 0.0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    f = heap[offset + 1 | 0] | 0;\n    g = heap[offset + 2 | 0] | 0;\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0;\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2);\n    mant = +(((f | 0) & 0x03) << 8 | g);\n\n    if (+exp == 0.0) {\n      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN();\n        } else {\n          pushInfinity();\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg();\n        } else {\n          pushInfinityNeg();\n        }\n      }\n    } else {\n      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));\n    }\n\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FLOAT_SINGLE(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FLOAT_DOUBLE(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function ERROR(octet) {\n    octet = octet | 0;\n    return 1;\n  }\n\n  function BREAK(octet) {\n    octet = octet | 0;\n    pushBreak();\n    offset = offset + 1 | 0;\n    return 0;\n  } // -- Jump Table\n\n\n  var jumpTable = [// Integer 0x00..0x17 (0..23)\n  INT_P, // 0x00\n  INT_P, // 0x01\n  INT_P, // 0x02\n  INT_P, // 0x03\n  INT_P, // 0x04\n  INT_P, // 0x05\n  INT_P, // 0x06\n  INT_P, // 0x07\n  INT_P, // 0x08\n  INT_P, // 0x09\n  INT_P, // 0x0A\n  INT_P, // 0x0B\n  INT_P, // 0x0C\n  INT_P, // 0x0D\n  INT_P, // 0x0E\n  INT_P, // 0x0F\n  INT_P, // 0x10\n  INT_P, // 0x11\n  INT_P, // 0x12\n  INT_P, // 0x13\n  INT_P, // 0x14\n  INT_P, // 0x15\n  INT_P, // 0x16\n  INT_P, // 0x17\n  // Unsigned integer (one-byte uint8_t follows)\n  UINT_P_8, // 0x18\n  // Unsigned integer (two-byte uint16_t follows)\n  UINT_P_16, // 0x19\n  // Unsigned integer (four-byte uint32_t follows)\n  UINT_P_32, // 0x1a\n  // Unsigned integer (eight-byte uint64_t follows)\n  UINT_P_64, // 0x1b\n  ERROR, // 0x1c\n  ERROR, // 0x1d\n  ERROR, // 0x1e\n  ERROR, // 0x1f\n  // Negative integer -1-0x00..-1-0x17 (-1..-24)\n  INT_N, // 0x20\n  INT_N, // 0x21\n  INT_N, // 0x22\n  INT_N, // 0x23\n  INT_N, // 0x24\n  INT_N, // 0x25\n  INT_N, // 0x26\n  INT_N, // 0x27\n  INT_N, // 0x28\n  INT_N, // 0x29\n  INT_N, // 0x2A\n  INT_N, // 0x2B\n  INT_N, // 0x2C\n  INT_N, // 0x2D\n  INT_N, // 0x2E\n  INT_N, // 0x2F\n  INT_N, // 0x30\n  INT_N, // 0x31\n  INT_N, // 0x32\n  INT_N, // 0x33\n  INT_N, // 0x34\n  INT_N, // 0x35\n  INT_N, // 0x36\n  INT_N, // 0x37\n  // Negative integer -1-n (one-byte uint8_t for n follows)\n  UINT_N_8, // 0x38\n  // Negative integer -1-n (two-byte uint16_t for n follows)\n  UINT_N_16, // 0x39\n  // Negative integer -1-n (four-byte uint32_t for nfollows)\n  UINT_N_32, // 0x3a\n  // Negative integer -1-n (eight-byte uint64_t for n follows)\n  UINT_N_64, // 0x3b\n  ERROR, // 0x3c\n  ERROR, // 0x3d\n  ERROR, // 0x3e\n  ERROR, // 0x3f\n  // byte string (0x00..0x17 bytes follow)\n  BYTE_STRING, // 0x40\n  BYTE_STRING, // 0x41\n  BYTE_STRING, // 0x42\n  BYTE_STRING, // 0x43\n  BYTE_STRING, // 0x44\n  BYTE_STRING, // 0x45\n  BYTE_STRING, // 0x46\n  BYTE_STRING, // 0x47\n  BYTE_STRING, // 0x48\n  BYTE_STRING, // 0x49\n  BYTE_STRING, // 0x4A\n  BYTE_STRING, // 0x4B\n  BYTE_STRING, // 0x4C\n  BYTE_STRING, // 0x4D\n  BYTE_STRING, // 0x4E\n  BYTE_STRING, // 0x4F\n  BYTE_STRING, // 0x50\n  BYTE_STRING, // 0x51\n  BYTE_STRING, // 0x52\n  BYTE_STRING, // 0x53\n  BYTE_STRING, // 0x54\n  BYTE_STRING, // 0x55\n  BYTE_STRING, // 0x56\n  BYTE_STRING, // 0x57\n  // byte string (one-byte uint8_t for n, and then n bytes follow)\n  BYTE_STRING_8, // 0x58\n  // byte string (two-byte uint16_t for n, and then n bytes follow)\n  BYTE_STRING_16, // 0x59\n  // byte string (four-byte uint32_t for n, and then n bytes follow)\n  BYTE_STRING_32, // 0x5a\n  // byte string (eight-byte uint64_t for n, and then n bytes follow)\n  BYTE_STRING_64, // 0x5b\n  ERROR, // 0x5c\n  ERROR, // 0x5d\n  ERROR, // 0x5e\n  // byte string, byte strings follow, terminated by \"break\"\n  BYTE_STRING_BREAK, // 0x5f\n  // UTF-8 string (0x00..0x17 bytes follow)\n  UTF8_STRING, // 0x60\n  UTF8_STRING, // 0x61\n  UTF8_STRING, // 0x62\n  UTF8_STRING, // 0x63\n  UTF8_STRING, // 0x64\n  UTF8_STRING, // 0x65\n  UTF8_STRING, // 0x66\n  UTF8_STRING, // 0x67\n  UTF8_STRING, // 0x68\n  UTF8_STRING, // 0x69\n  UTF8_STRING, // 0x6A\n  UTF8_STRING, // 0x6B\n  UTF8_STRING, // 0x6C\n  UTF8_STRING, // 0x6D\n  UTF8_STRING, // 0x6E\n  UTF8_STRING, // 0x6F\n  UTF8_STRING, // 0x70\n  UTF8_STRING, // 0x71\n  UTF8_STRING, // 0x72\n  UTF8_STRING, // 0x73\n  UTF8_STRING, // 0x74\n  UTF8_STRING, // 0x75\n  UTF8_STRING, // 0x76\n  UTF8_STRING, // 0x77\n  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n  UTF8_STRING_8, // 0x78\n  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n  UTF8_STRING_16, // 0x79\n  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n  UTF8_STRING_32, // 0x7a\n  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n  UTF8_STRING_64, // 0x7b\n  // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n  ERROR, // 0x7c\n  ERROR, // 0x7d\n  ERROR, // 0x7e\n  UTF8_STRING_BREAK, // 0x7f\n  // array (0x00..0x17 data items follow)\n  ARRAY, // 0x80\n  ARRAY, // 0x81\n  ARRAY, // 0x82\n  ARRAY, // 0x83\n  ARRAY, // 0x84\n  ARRAY, // 0x85\n  ARRAY, // 0x86\n  ARRAY, // 0x87\n  ARRAY, // 0x88\n  ARRAY, // 0x89\n  ARRAY, // 0x8A\n  ARRAY, // 0x8B\n  ARRAY, // 0x8C\n  ARRAY, // 0x8D\n  ARRAY, // 0x8E\n  ARRAY, // 0x8F\n  ARRAY, // 0x90\n  ARRAY, // 0x91\n  ARRAY, // 0x92\n  ARRAY, // 0x93\n  ARRAY, // 0x94\n  ARRAY, // 0x95\n  ARRAY, // 0x96\n  ARRAY, // 0x97\n  // array (one-byte uint8_t fo, and then n data items follow)\n  ARRAY_8, // 0x98\n  // array (two-byte uint16_t for n, and then n data items follow)\n  ARRAY_16, // 0x99\n  // array (four-byte uint32_t for n, and then n data items follow)\n  ARRAY_32, // 0x9a\n  // array (eight-byte uint64_t for n, and then n data items follow)\n  ARRAY_64, // 0x9b\n  // array, data items follow, terminated by \"break\"\n  ERROR, // 0x9c\n  ERROR, // 0x9d\n  ERROR, // 0x9e\n  ARRAY_BREAK, // 0x9f\n  // map (0x00..0x17 pairs of data items follow)\n  MAP, // 0xa0\n  MAP, // 0xa1\n  MAP, // 0xa2\n  MAP, // 0xa3\n  MAP, // 0xa4\n  MAP, // 0xa5\n  MAP, // 0xa6\n  MAP, // 0xa7\n  MAP, // 0xa8\n  MAP, // 0xa9\n  MAP, // 0xaA\n  MAP, // 0xaB\n  MAP, // 0xaC\n  MAP, // 0xaD\n  MAP, // 0xaE\n  MAP, // 0xaF\n  MAP, // 0xb0\n  MAP, // 0xb1\n  MAP, // 0xb2\n  MAP, // 0xb3\n  MAP, // 0xb4\n  MAP, // 0xb5\n  MAP, // 0xb6\n  MAP, // 0xb7\n  // map (one-byte uint8_t for n, and then n pairs of data items follow)\n  MAP_8, // 0xb8\n  // map (two-byte uint16_t for n, and then n pairs of data items follow)\n  MAP_16, // 0xb9\n  // map (four-byte uint32_t for n, and then n pairs of data items follow)\n  MAP_32, // 0xba\n  // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n  MAP_64, // 0xbb\n  ERROR, // 0xbc\n  ERROR, // 0xbd\n  ERROR, // 0xbe\n  // map, pairs of data items follow, terminated by \"break\"\n  MAP_BREAK, // 0xbf\n  // Text-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN, // 0xc0\n  // Epoch-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN, // 0xc1\n  // Positive bignum (data item \"byte string\" follows)\n  TAG_KNOWN, // 0xc2\n  // Negative bignum (data item \"byte string\" follows)\n  TAG_KNOWN, // 0xc3\n  // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN, // 0xc4\n  // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN, // 0xc5\n  // (tagged item)\n  TAG_UNASSIGNED, // 0xc6\n  TAG_UNASSIGNED, // 0xc7\n  TAG_UNASSIGNED, // 0xc8\n  TAG_UNASSIGNED, // 0xc9\n  TAG_UNASSIGNED, // 0xca\n  TAG_UNASSIGNED, // 0xcb\n  TAG_UNASSIGNED, // 0xcc\n  TAG_UNASSIGNED, // 0xcd\n  TAG_UNASSIGNED, // 0xce\n  TAG_UNASSIGNED, // 0xcf\n  TAG_UNASSIGNED, // 0xd0\n  TAG_UNASSIGNED, // 0xd1\n  TAG_UNASSIGNED, // 0xd2\n  TAG_UNASSIGNED, // 0xd3\n  TAG_UNASSIGNED, // 0xd4\n  // Expected Conversion (data item follows; see Section 2.4.4.2)\n  TAG_UNASSIGNED, // 0xd5\n  TAG_UNASSIGNED, // 0xd6\n  TAG_UNASSIGNED, // 0xd7\n  // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n  TAG_MORE_1, // 0xd8\n  TAG_MORE_2, // 0xd9\n  TAG_MORE_4, // 0xda\n  TAG_MORE_8, // 0xdb\n  ERROR, // 0xdc\n  ERROR, // 0xdd\n  ERROR, // 0xde\n  ERROR, // 0xdf\n  // (simple value)\n  SIMPLE_UNASSIGNED, // 0xe0\n  SIMPLE_UNASSIGNED, // 0xe1\n  SIMPLE_UNASSIGNED, // 0xe2\n  SIMPLE_UNASSIGNED, // 0xe3\n  SIMPLE_UNASSIGNED, // 0xe4\n  SIMPLE_UNASSIGNED, // 0xe5\n  SIMPLE_UNASSIGNED, // 0xe6\n  SIMPLE_UNASSIGNED, // 0xe7\n  SIMPLE_UNASSIGNED, // 0xe8\n  SIMPLE_UNASSIGNED, // 0xe9\n  SIMPLE_UNASSIGNED, // 0xea\n  SIMPLE_UNASSIGNED, // 0xeb\n  SIMPLE_UNASSIGNED, // 0xec\n  SIMPLE_UNASSIGNED, // 0xed\n  SIMPLE_UNASSIGNED, // 0xee\n  SIMPLE_UNASSIGNED, // 0xef\n  SIMPLE_UNASSIGNED, // 0xf0\n  SIMPLE_UNASSIGNED, // 0xf1\n  SIMPLE_UNASSIGNED, // 0xf2\n  SIMPLE_UNASSIGNED, // 0xf3\n  // False\n  SIMPLE_FALSE, // 0xf4\n  // True\n  SIMPLE_TRUE, // 0xf5\n  // Null\n  SIMPLE_NULL, // 0xf6\n  // Undefined\n  SIMPLE_UNDEFINED, // 0xf7\n  // (simple value, one byte follows)\n  SIMPLE_BYTE, // 0xf8\n  // Half-Precision Float (two-byte IEEE 754)\n  SIMPLE_FLOAT_HALF, // 0xf9\n  // Single-Precision Float (four-byte IEEE 754)\n  SIMPLE_FLOAT_SINGLE, // 0xfa\n  // Double-Precision Float (eight-byte IEEE 754)\n  SIMPLE_FLOAT_DOUBLE, // 0xfb\n  ERROR, // 0xfc\n  ERROR, // 0xfd\n  ERROR, // 0xfe\n  // \"break\" stop code\n  BREAK // 0xff\n  ]; // --\n\n  return {\n    parse: parse\n  };\n};","map":null,"metadata":{},"sourceType":"script"}