{"ast":null,"code":"'use strict';\n\nvar DuplexStream = require('readable-stream').Duplex;\n\nvar inherits = require('inherits');\n\nvar BufferList = require('./BufferList');\n\nfunction BufferListStream(callback) {\n  if (!(this instanceof BufferListStream)) {\n    return new BufferListStream(callback);\n  }\n\n  if (typeof callback === 'function') {\n    this._callback = callback;\n\n    var piper = function piper(err) {\n      if (this._callback) {\n        this._callback(err);\n\n        this._callback = null;\n      }\n    }.bind(this);\n\n    this.on('pipe', function onPipe(src) {\n      src.on('error', piper);\n    });\n    this.on('unpipe', function onUnpipe(src) {\n      src.removeListener('error', piper);\n    });\n    callback = null;\n  }\n\n  BufferList._init.call(this, callback);\n\n  DuplexStream.call(this);\n}\n\ninherits(BufferListStream, DuplexStream);\nObject.assign(BufferListStream.prototype, BufferList.prototype);\n\nBufferListStream.prototype._new = function _new(callback) {\n  return new BufferListStream(callback);\n};\n\nBufferListStream.prototype._write = function _write(buf, encoding, callback) {\n  this._appendBuffer(buf);\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n};\n\nBufferListStream.prototype._read = function _read(size) {\n  if (!this.length) {\n    return this.push(null);\n  }\n\n  size = Math.min(size, this.length);\n  this.push(this.slice(0, size));\n  this.consume(size);\n};\n\nBufferListStream.prototype.end = function end(chunk) {\n  DuplexStream.prototype.end.call(this, chunk);\n\n  if (this._callback) {\n    this._callback(null, this.slice());\n\n    this._callback = null;\n  }\n};\n\nBufferListStream.prototype._destroy = function _destroy(err, cb) {\n  this._bufs.length = 0;\n  this.length = 0;\n  cb(err);\n};\n\nBufferListStream.prototype._isBufferList = function _isBufferList(b) {\n  return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b);\n};\n\nBufferListStream.isBufferList = BufferList.isBufferList;\nmodule.exports = BufferListStream;\nmodule.exports.BufferListStream = BufferListStream;\nmodule.exports.BufferList = BufferList;","map":null,"metadata":{},"sourceType":"script"}