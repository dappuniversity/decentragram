{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar IsIpfs = require('is-ipfs');\n\nvar moduleConfig = require('../utils/module-config');\n\nvar cleanCID = require('../utils/clean-cid');\n\nmodule.exports = function (arg) {\n  var send = moduleConfig(arg);\n  return promisify(function (args, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      args = cleanCID(args);\n    } catch (err) {\n      if (!IsIpfs.ipfsPath(args)) {\n        return callback(err);\n      }\n    }\n\n    send({\n      path: 'ls',\n      args: args,\n      qs: opts\n    }, function (err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var result = results.Objects;\n\n      if (!result) {\n        return callback(new Error('expected .Objects in results'));\n      }\n\n      result = result[0];\n\n      if (!result) {\n        return callback(new Error('expected one array in results.Objects'));\n      }\n\n      result = result.Links;\n\n      if (!Array.isArray(result)) {\n        return callback(new Error('expected one array in results.Objects[0].Links'));\n      }\n\n      result = result.map(function (link) {\n        return {\n          name: link.Name,\n          path: args + '/' + link.Name,\n          size: link.Size,\n          hash: link.Hash,\n          type: typeOf(link),\n          depth: link.Depth || 1\n        };\n      });\n      callback(null, result);\n    });\n  });\n};\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'unknown';\n  }\n}","map":null,"metadata":{},"sourceType":"script"}