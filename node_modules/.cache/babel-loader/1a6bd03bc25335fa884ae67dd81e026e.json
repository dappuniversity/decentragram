{"ast":null,"code":"/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar constants = require('./constants');\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n\n  var enc = encoding(nameOrCode);\n  validEncode(enc.name, buf);\n  return Buffer.concat([enc.codeBuf, buf]);\n}\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\n\n\nfunction encode(nameOrCode, buf) {\n  var enc = encoding(nameOrCode);\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))]);\n}\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\n\n\nfunction decode(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  var prefix = data[0]; // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n\n  var enc = encoding(data[0]);\n  return Buffer.from(enc.decode(data.substring(1)));\n}\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} data\n * @returns {boolean}\n */\n\n\nfunction isEncoded(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  } // Ensure bufOrString is a string\n\n\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n\n  try {\n    var enc = encoding(data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Buffer} buf\n * @returns {undefined}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction validEncode(name, buf) {\n  var enc = encoding(name);\n  enc.decode(buf.toString());\n}\n/**\n * Get the encoding by name or code\n *\n * @param {string} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction encoding(nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode];\n  } else {\n    throw new Error(\"Unsupported encoding: \".concat(nameOrCode));\n  }\n}\n/**\n * Get encoding from data\n *\n * @param {string|Buffer} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\n\n\nfunction encodingFromData(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  return encoding(data[0]);\n}\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nexports.names = Object.freeze(constants.names);\nexports.codes = Object.freeze(constants.codes);","map":null,"metadata":{},"sourceType":"script"}