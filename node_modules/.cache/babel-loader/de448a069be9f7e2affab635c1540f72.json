{"ast":null,"code":"'use strict';\n\nvar kindOf = require('kind-of');\n\nvar isStream = require('is-stream');\n\nvar _require = require('is-pull-stream'),\n    isSource = _require.isSource;\n\nvar isBuffer = require('is-buffer');\n\nvar validateAddInput = function validateAddInput(input) {\n  // Buffer|ReadableStream|PullStream|File\n  var isPrimitive = function isPrimitive(obj) {\n    return isBuffer(obj) || isStream.readable(obj) || isSource(obj) || kindOf(obj) === 'file';\n  }; // An object like { content?, path? }, where content isBufferOrStream and path isString\n\n\n  var isContentObject = function isContentObject(obj) {\n    if (typeof obj !== 'object') return false; // path is optional if content is present\n\n    if (obj.content) return isPrimitive(obj.content); // path must be a non-empty string if no content\n\n    return Boolean(obj.path) && typeof obj.path === 'string';\n  }; // An input atom: a buffer, stream or content object\n\n\n  var isInput = function isInput(obj) {\n    return isPrimitive(obj) || isContentObject(obj);\n  };\n\n  if (isInput(input) || Array.isArray(input) && input.every(isInput)) {\n    return true;\n  } else {\n    throw new Error(\"Input not supported. Expected Buffer|ReadableStream|PullStream|File|Array<Object> got \".concat(kindOf(input), \". Check the documentation for more info https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add\"));\n  }\n};\n\nmodule.exports = validateAddInput;","map":null,"metadata":{},"sourceType":"script"}