{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nmodule.exports = function (send) {\n  return promisify(function (cid, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var handleResult = function handleResult(res, callback) {\n      // Inconsistent return values in the browser vs node\n      if (!Array.isArray(res)) {\n        res = [res];\n      }\n\n      var responses = [];\n      res.forEach(function (result) {\n        // 4 = Provider\n        if (result.Type !== 4) return;\n        result.Responses.forEach(function (response) {\n          var peerInfo = new PeerInfo(PeerId.createFromB58String(response.ID));\n\n          if (response.Addrs) {\n            response.Addrs.forEach(function (addr) {\n              var ma = multiaddr(addr);\n              peerInfo.multiaddrs.add(ma);\n            });\n          }\n\n          responses.push(peerInfo);\n        });\n      });\n      callback(null, responses);\n    };\n\n    send({\n      path: 'dht/findprovs',\n      args: cid.toString(),\n      qs: opts\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}