{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar errcode = require('err-code');\n\nmodule.exports = function (send) {\n  return promisify(function (peerId, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var handleResult = function handleResult(res, callback) {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(function (r) {\n          return r.Type === 2;\n        });\n      } // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n\n\n      if (!res || res.Type !== 2) {\n        var errMsg = \"key was not found (type 4)\";\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'));\n      }\n\n      var responseReceived = res.Responses[0];\n      var peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID));\n      responseReceived.Addrs.forEach(function (addr) {\n        var ma = multiaddr(addr);\n        peerInfo.multiaddrs.add(ma);\n      });\n      callback(null, peerInfo);\n    };\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}