{"ast":null,"code":"'use strict';\n\nvar isNode = require('detect-node');\n\nvar flatmap = require('flatmap');\n\nvar _require = require('readable-stream'),\n    Readable = _require.Readable;\n\nvar kindOf = require('kind-of');\n\nvar _require2 = require('is-pull-stream'),\n    isSource = _require2.isSource;\n\nvar isStream = require('is-stream');\n\nvar pullToStream = require('pull-to-stream');\n\nvar _require3 = require('ipfs-utils/src/supports'),\n    supportsFileReader = _require3.supportsFileReader;\n\nvar streamFromFileReader = require('ipfs-utils/src/streams/stream-from-filereader');\n\nfunction loadPaths(opts, file) {\n  var path = require('path');\n\n  var fs = require('fs');\n\n  var glob = require('glob');\n\n  var followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true;\n  file = path.resolve(file);\n  var stats = fs.statSync(file);\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive');\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/');\n    var fullDir = file + (file.endsWith('/') ? '' : '/');\n    var dirName = fullDir.split('/');\n    dirName = dirName[dirName.length - 2] + '/';\n    var mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    });\n    return mg.found.map(function (name) {\n      var fqn = fullDir + name; // symlinks\n\n      if (mg.symlinks[fqn] === true) {\n        return {\n          path: dirName + name,\n          symlink: true,\n          dir: false,\n          content: fs.readlinkSync(fqn)\n        };\n      } // files\n\n\n      if (mg.cache[fqn] === 'FILE') {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: false,\n          content: fs.createReadStream(fqn)\n        };\n      } // directories\n\n\n      if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: true\n        };\n      } // files inside symlinks and others\n\n    }) // filter out null files\n    .filter(Boolean);\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  };\n}\n\nfunction contentToStream(content) {\n  if (supportsFileReader && kindOf(content) === 'file') {\n    return streamFromFileReader(content);\n  }\n\n  if (kindOf(content) === 'buffer') {\n    return new Readable({\n      read: function read() {\n        this.push(content);\n        this.push(null);\n      }\n    });\n  }\n\n  if (isSource(content)) {\n    return pullToStream.readable(content);\n  }\n\n  if (isStream.readable(content)) {\n    return content;\n  }\n\n  throw new Error(\"Input not supported. Expected Buffer|ReadableStream|PullStream|File got \".concat(kindOf(content), \". Check the documentation for more info https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add\"));\n}\n\nfunction prepareFile(file, opts) {\n  var files = [].concat(file);\n  return flatmap(files, function (file) {\n    // add from fs with file path\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node');\n      }\n\n      return loadPaths(opts, file);\n    } // add with object syntax { path : <string> , content: <Buffer|ReadableStream|PullStream|File }\n\n\n    if (kindOf(file) === 'object') {\n      // treat as an empty directory when path is a string and content undefined\n      if (file.path && kindOf(file.path) === 'string' && !file.content) {\n        file.dir = true;\n        return file;\n      } // just return when directory\n\n\n      if (file.dir) {\n        return file;\n      }\n\n      if (file.content) {\n        return {\n          path: file.path || '',\n          symlink: false,\n          dir: false,\n          content: contentToStream(file.content)\n        };\n      }\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: contentToStream(file)\n    };\n  });\n}\n\nexports = module.exports = prepareFile;","map":null,"metadata":{},"sourceType":"script"}