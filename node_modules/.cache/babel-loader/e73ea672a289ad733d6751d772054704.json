{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\30698\\\\New-Insta\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\30698\\\\New-Insta\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nvar ipfsClient = require(\"ipfs-http-client\");\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser found. You should add metamask extension to your browser.');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, decentragram, imagesCount, i, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; //load acount\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = Decentragram.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                decentragram = web3.eth.Contract(Decentragram.abi, networkData.address);\n                this.setState({\n                  decentragram: decentragram\n                });\n                _context3.next = 14;\n                return decentragram.methods.imageCount().call();\n\n              case 14:\n                imagesCount = _context3.sent;\n                this.setState({\n                  imagesCount: imagesCount\n                }); //load images\n\n                i = 1;\n\n              case 17:\n                if (!(i <= imagesCount)) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                _context3.next = 20;\n                return decentragram.methods.images(i).call();\n\n              case 20:\n                image = _context3.sent;\n                this.setState({\n                  images: [].concat(_toConsumableArray(this.state.images), [image])\n                });\n\n              case 22:\n                i++;\n                _context3.next = 17;\n                break;\n\n              case 25:\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 29;\n                break;\n\n              case 28:\n                window.alert(\"Decentragram contract is not deployed to detected network.\");\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.buffer);\n      };\n    };\n\n    _this.uploadImage = function (description) {\n      console.log(\"Submiting the file to IPFS...\"); //adding the file to ipfs\n\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('IPFS result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        _this.setState({\n          loading: true\n        });\n\n        _this.state.decentragram.methods.uploadImage(result[0].hash, description).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(Main, {\n        images: this.state.images,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), \"}\");\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\30698\\New-Insta\\src\\components\\App.js"],"names":["React","Component","Web3","Identicon","Decentragram","Navbar","Main","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","getId","networkId","networkData","networks","decentragram","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","state","loading","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadImage","description","add","error","hash","send","from","on"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport Identicon from 'identicon.js';\r\nimport './App.css';\r\nimport Decentragram from '../abis/Decentragram.json'\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\n\r\nconst ipfsClient = require(\"ipfs-http-client\")\r\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount(){\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3(){\r\n\r\n    if (window.ethereum){\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3){\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else{\r\n      window.alert('No ethereum browser found. You should add metamask extension to your browser.')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData(){\r\n    const web3 = window.web3\r\n\r\n    //load acount\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({account: accounts[0]})\r\n\r\n    const networkId =await web3.eth.getId()\r\n    const networkData = Decentragram.networks[networkId]\r\n\r\n    if (networkData){\r\n      const decentragram = web3.eth.Contract(Decentragram.abi, networkData.address)\r\n      this.setState({decentragram: decentragram})\r\n      const imagesCount = await decentragram.methods.imageCount().call()\r\n      this.setState({imagesCount})\r\n\r\n      //load images\r\n      for(var i = 1; i <= imagesCount; i++){\r\n        const image = await decentragram.methods.images(i).call()\r\n        this.setState({\r\n          images: [...this.state.images, image]\r\n        })\r\n      }\r\n\r\n      this.setState({loading: false})\r\n\r\n    } else{\r\n      window.alert(\"Decentragram contract is not deployed to detected network.\")\r\n\r\n\r\n    }\r\n  }\r\n\r\n  captureFile = event =>{\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n\r\n    reader.onloadend = () =>{\r\n      this.setState({buffer: Buffer(reader.result)})\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  uploadImage = description =>{\r\n\r\n    console.log(\"Submiting the file to IPFS...\")\r\n\r\n    //adding the file to ipfs\r\n    ipfs.add(this.state.buffer, (error,result) => {\r\n      console.log('IPFS result', result)\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({loading:true})\r\n      this.state.decentragram.methods.uploadImage(result[0].hash, description).send({from: this.state.account}).on('transactionHash', (hash) =>{\r\n        this.setState({loading:false})\r\n      })\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      decentragram: null,\r\n      images: [],\r\n      loading: true\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              images={this.state.images}\r\n              captureFile={this.captureFile}\r\n              uploadImage={this.uploadImage}\r\n            />\r\n          }\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}