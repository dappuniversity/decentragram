{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar ConcatStream = require('concat-stream');\n\nvar once = require('once');\n\nvar _require = require('is-pull-stream'),\n    isSource = _require.isSource;\n\nvar FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nvar SendFilesStream = require('../utils/send-files-stream');\n\nvar validateAddInput = require('ipfs-utils/src/files/add-input-validation');\n\nmodule.exports = function (send) {\n  var createAddStream = SendFilesStream(send, 'add');\n  var add = promisify(function (_files, options, _callback) {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n\n    var callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    options.converter = FileResultStreamConverter;\n\n    try {\n      validateAddInput(_files);\n    } catch (err) {\n      return callback(err);\n    }\n\n    var files = [].concat(_files);\n    var stream = createAddStream({\n      qs: options\n    });\n    var concat = ConcatStream(function (result) {\n      return callback(null, result);\n    });\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(function (file) {\n      return stream.write(file);\n    });\n    stream.end();\n  });\n  return function () {\n    var args = Array.from(arguments); // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}