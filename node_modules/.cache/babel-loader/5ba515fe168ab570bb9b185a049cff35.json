{"ast":null,"code":"/**\n * Javascript implementation of a basic Public Key Infrastructure, including\n * support for RSA public and private keys.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./asn1');\n\nrequire('./oids');\n\nrequire('./pbe');\n\nrequire('./pem');\n\nrequire('./pbkdf2');\n\nrequire('./pkcs12');\n\nrequire('./pss');\n\nrequire('./rsa');\n\nrequire('./util');\n\nrequire('./x509'); // shortcut for asn.1 API\n\n\nvar asn1 = forge.asn1;\n/* Public Key Infrastructure (PKI) implementation. */\n\nvar pki = module.exports = forge.pki = forge.pki || {};\n/**\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n *\n * Converts PEM-formatted data to DER.\n *\n * @param pem the PEM-formatted data.\n *\n * @return the DER-formatted data.\n */\n\npki.pemToDer = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\n  }\n\n  return forge.util.createBuffer(msg.body);\n};\n/**\n * Converts an RSA private key from PEM format.\n *\n * @param pem the PEM-formatted private key.\n *\n * @return the private key.\n */\n\n\npki.privateKeyFromPem = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if (msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM ' + 'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\n  } // convert DER to ASN.1 object\n\n\n  var obj = asn1.fromDer(msg.body);\n  return pki.privateKeyFromAsn1(obj);\n};\n/**\n * Converts an RSA private key to PEM format.\n *\n * @param key the private key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\n\n\npki.privateKeyToPem = function (key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};\n/**\n * Converts a PrivateKeyInfo to PEM format.\n *\n * @param pki the PrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\n\n\npki.privateKeyInfoToPem = function (pki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'PRIVATE KEY',\n    body: asn1.toDer(pki).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};","map":null,"metadata":{},"sourceType":"script"}