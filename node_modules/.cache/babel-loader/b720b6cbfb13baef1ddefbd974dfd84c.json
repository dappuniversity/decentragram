{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar pump = require('pump');\n\nvar Writable = require('readable-stream').Writable;\n\nvar moduleConfig = require('./utils/module-config');\n\nvar PingMessageStream = require('./utils/ping-message-stream');\n\nmodule.exports = function (arg) {\n  var send = moduleConfig(arg);\n  return promisify(function (id, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (opts.n && opts.count) {\n      return callback(new Error('Use either n or count, not both'));\n    } // Default number of packtes to 1\n\n\n    if (!opts.n && !opts.count) {\n      opts.n = 1;\n    }\n\n    var request = {\n      path: 'ping',\n      args: id,\n      qs: opts // Transform the response stream to a value:\n      // [{ success: <boolean>, time: <number>, text: <string> }]\n\n    };\n\n    var transform = function transform(stream, callback) {\n      var messageConverter = new PingMessageStream();\n      var responses = [];\n      pump(stream, messageConverter, new Writable({\n        objectMode: true,\n        write: function write(chunk, enc, cb) {\n          responses.push(chunk);\n          cb();\n        }\n      }), function (err) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, responses);\n      });\n    };\n\n    send.andTransform(request, transform, callback);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}