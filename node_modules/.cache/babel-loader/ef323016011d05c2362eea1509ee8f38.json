{"ast":null,"code":"'use strict';\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar promisify = require('promisify-es6');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar SendOneFile = require('../utils/send-one-file');\n\nmodule.exports = function (send) {\n  var sendOneFile = SendOneFile(send, 'dag/put');\n  return promisify(function (dagNode, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    options = options || {};\n\n    if (options.hash) {\n      options.hashAlg = options.hash;\n      delete options.hash;\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'));\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'));\n    }\n\n    if (options.cid) {\n      var cid;\n\n      try {\n        cid = new CID(options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n\n      options.format = cid.codec;\n      options.hashAlg = multihash.decode(cid.multihash).name;\n      delete options.cid;\n    }\n\n    var optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    };\n    options = Object.assign(optionDefaults, options);\n    var serialized;\n\n    try {\n      if (options.format === 'dag-cbor') {\n        serialized = dagCBOR.util.serialize(dagNode);\n      } else if (options.format === 'dag-pb') {\n        serialized = dagPB.util.serialize(dagNode);\n      } else {\n        // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n        serialized = dagNode;\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    var sendOptions = {\n      qs: {\n        hash: options.hashAlg,\n        format: options.format,\n        'input-enc': options.inputEnc\n      }\n    };\n    sendOneFile(serialized, sendOptions, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result['Cid']) {\n        return callback(null, new CID(result['Cid']['/']));\n      } else {\n        return callback(result);\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}