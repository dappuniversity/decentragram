{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar _require = require('iso-url'),\n    URL = _require.URL;\n\nvar _require2 = require('iso-stream-http'),\n    getRequest = _require2.getRequest;\n\nvar SendOneFile = require('../utils/send-one-file-multiple-results');\n\nvar FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nmodule.exports = function (send) {\n  var sendOneFile = SendOneFile(send, 'add');\n  return promisify(function (url, opts, callback) {\n    if (typeof opts === 'function' && callback === undefined) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (!validUrl(url)) {\n      return callback(new Error('\"url\" param must be an http(s) url'));\n    }\n\n    requestWithRedirect(url, opts, sendOneFile, callback);\n  });\n};\n\nvar validUrl = function validUrl(url) {\n  return typeof url === 'string' && url.startsWith('http');\n};\n\nvar requestWithRedirect = function requestWithRedirect(url, opts, sendOneFile, callback) {\n  var parsedUrl = new URL(url);\n  var req = getRequest(parsedUrl, function (res) {\n    if (res.statusCode >= 400) {\n      return callback(new Error(\"Failed to download with \".concat(res.statusCode)));\n    }\n\n    var redirection = res.headers.location;\n\n    if (res.statusCode >= 300 && res.statusCode < 400 && redirection) {\n      if (!validUrl(redirection)) {\n        return callback(new Error('redirection url must be an http(s) url'));\n      }\n\n      requestWithRedirect(redirection, opts, sendOneFile, callback);\n    } else {\n      var requestOpts = {\n        qs: opts,\n        converter: FileResultStreamConverter\n      };\n      var fileName = decodeURIComponent(parsedUrl.pathname.split('/').pop());\n      sendOneFile({\n        content: res,\n        path: fileName\n      }, requestOpts, callback);\n    }\n  });\n  req.once('error', callback);\n  req.end();\n};","map":null,"metadata":{},"sourceType":"script"}