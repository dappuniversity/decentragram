{"ast":null,"code":"var isPromise = require('is-promise');\n\nvar nextTick;\nif (typeof setImediate === 'function') nextTick = setImediate;else if (typeof process === 'object' && process && process.nextTick) nextTick = process.nextTick;else nextTick = function nextTick(cb) {\n  setTimeout(cb, 0);\n};\nvar extensions = [];\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise)) {\n    return typeof fn === 'function' ? new Promise(fn) : defer();\n  }\n\n  var isResolved = false;\n  var isFulfilled = false;\n  var value;\n  var waiting = [];\n  var running = false;\n\n  function next(skipTimeout) {\n    if (waiting.length) {\n      running = true;\n      waiting.shift()(skipTimeout || false);\n    } else {\n      running = false;\n    }\n  }\n\n  this.then = then;\n\n  function then(cb, eb) {\n    return new Promise(function (resolver) {\n      function done(skipTimeout) {\n        var callback = isFulfilled ? cb : eb;\n\n        if (typeof callback === 'function') {\n          var timeoutDone = function timeoutDone() {\n            var val;\n\n            try {\n              val = callback(value);\n            } catch (ex) {\n              resolver.reject(ex);\n              return next();\n            }\n\n            resolver.fulfill(val);\n            next(true);\n          };\n\n          if (skipTimeout) timeoutDone();else nextTick(timeoutDone);\n        } else if (isFulfilled) {\n          resolver.fulfill(value);\n          next(skipTimeout);\n        } else {\n          resolver.reject(value);\n          next(skipTimeout);\n        }\n      }\n\n      waiting.push(done);\n      if (isResolved && !running) next();\n    });\n  }\n\n  (function () {\n    function fulfill(val) {\n      if (isResolved) return;\n      if (isPromise(val)) val.then(fulfill, reject);else {\n        isResolved = isFulfilled = true;\n        value = val;\n        next();\n      }\n    }\n\n    function reject(err) {\n      if (isResolved) return;\n      isResolved = true;\n      isFulfilled = false;\n      value = err;\n      next();\n    }\n\n    var resolver = {\n      fulfill: fulfill,\n      reject: reject\n    };\n\n    for (var i = 0; i < extensions.length; i++) {\n      extensions[i](this, resolver);\n    }\n\n    if (typeof fn === 'function') {\n      try {\n        fn(resolver);\n      } catch (ex) {\n        resolver.reject(ex);\n      }\n    }\n  })();\n}\n\nfunction defer() {\n  var resolver;\n  var promise = new Promise(function (res) {\n    resolver = res;\n  });\n  return {\n    resolver: resolver,\n    promise: promise\n  };\n}\n\nPromise.use = function (extension) {\n  extensions.push(extension);\n};","map":null,"metadata":{},"sourceType":"script"}