{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar Block = require('ipfs-block');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar SendOneFile = require('../utils/send-one-file');\n\nmodule.exports = function (send) {\n  var sendOneFile = SendOneFile(send, 'block/put');\n  return promisify(function (block, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n\n    if (Array.isArray(block)) {\n      return callback(new Error('block.put accepts only one block'));\n    }\n\n    if (Buffer.isBuffer(block)) {\n      block = {\n        data: block\n      };\n    }\n\n    if (!block || !block.data) {\n      return callback(new Error('invalid block arg'));\n    }\n\n    var qs = {};\n\n    if (block.cid || options.cid) {\n      var cid;\n\n      try {\n        cid = new CID(block.cid || options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n\n      var _multihash$decode = multihash.decode(cid.multihash),\n          name = _multihash$decode.name,\n          length = _multihash$decode.length;\n\n      qs.format = cid.codec;\n      qs.mhtype = name;\n      qs.mhlen = length;\n      qs.version = cid.version;\n    } else {\n      if (options.format) qs.format = options.format;\n      if (options.mhtype) qs.mhtype = options.mhtype;\n      if (options.mhlen) qs.mhlen = options.mhlen;\n      if (options.version != null) qs.version = options.version;\n    }\n\n    sendOneFile(block.data, {\n      qs: qs\n    }, function (err, result) {\n      if (err) {\n        // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n        // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n        if (qs.format === 'dag-pb' || qs.format === 'dag-cbor') {\n          qs.format = qs.format === 'dag-pb' ? 'protobuf' : 'cbor';\n          return sendOneFile(block.data, {\n            qs: qs\n          }, function (err, result) {\n            if (err) return callback(err);\n            callback(null, new Block(block.data, new CID(result.Key)));\n          });\n        }\n\n        return callback(err);\n      }\n\n      callback(null, new Block(block.data, new CID(result.Key)));\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}