{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar cleanCID = require('../utils/clean-cid');\n\nvar TarStreamToObjects = require('../utils/tar-stream-to-objects');\n\nvar concat = require('concat-stream');\n\nvar through = require('through2');\n\nvar v = require('is-ipfs');\n\nmodule.exports = function (send) {\n  return promisify(function (path, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      path = cleanCID(path);\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return callback(err);\n      }\n    }\n\n    var request = {\n      path: 'get',\n      args: path,\n      qs: opts // Convert the response stream to TarStream objects\n\n    };\n    send.andTransform(request, TarStreamToObjects, function (err, stream) {\n      if (err) {\n        return callback(err);\n      }\n\n      var files = [];\n      stream.pipe(through.obj(function (file, enc, next) {\n        if (file.content) {\n          file.content.pipe(concat(function (content) {\n            files.push({\n              path: file.path,\n              content: content\n            });\n          }));\n        } else {\n          files.push(file);\n        }\n\n        next();\n      }, function () {\n        return callback(null, files);\n      }));\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}