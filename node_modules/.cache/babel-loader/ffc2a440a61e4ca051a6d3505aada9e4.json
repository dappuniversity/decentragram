{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar isIp = require('is-ip');\n\nvar isIP = isIp;\nvar isV4 = isIp.v4;\nvar isV6 = isIp.v6; // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n\nvar toBuffer = function toBuffer(ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n\n  if (isV4(ip)) {\n    result = buff || Buffer.alloc(offset + 4);\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (isV6(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = isV4(sections[i]);\n      var v4Buffer;\n\n      if (isv4) {\n        v4Buffer = toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) {\n        sections.unshift('0');\n      }\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) {\n        sections.push('0');\n      }\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++) {\n        ;\n      }\n\n      var argv = [i, '1'];\n\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || Buffer.alloc(offset + 16);\n\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n\n  return result;\n}; // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n\n\nvar toString = function toString(buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n  var string;\n\n  if (length === 4) {\n    // IPv4\n    for (var i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n\n    string = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (var _i = 0; _i < length; _i += 2) {\n      result.push(buff.readUInt16BE(offset + _i).toString(16));\n    }\n\n    string = result.join(':');\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    string = string.replace(/:{3,4}/, '::');\n  }\n\n  return string;\n};\n\nmodule.exports = {\n  isIP: isIP,\n  isV4: isV4,\n  isV6: isV6,\n  toBuffer: toBuffer,\n  toString: toString\n};","map":null,"metadata":{},"sourceType":"script"}